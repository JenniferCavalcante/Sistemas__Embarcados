Para todas as questões, compile-as com o gcc e execute-as via terminal.

1. Crie um "Olá mundo!" em C.

#include <stdio.h>
#include <stdlib.h>
int main(){

printf("Ola mundo!\n");

return 0;
}


2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':

```bash
$ ./ola_usuario_1
$ Digite o seu nome: Eu
$ Ola Eu
```

#include <stdio.h>
#include <stdlib.h>

int main ()
{
    char name[256];
    printf("Digite o seu nome:\n");
    scanf("%s", nome);
    printf("Ola %s\n", nome);
    return 0;
}

3. Apresente os comportamentos do código anterior nos seguintes casos:

(a) Se o usuário insere mais de um nome.
```bash
$ ./ola_usuario_1
$ Digite o seu nome: Eu Mesmo
```
saída: Ola Eu

(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
```bash
$ ./ola_usuario_1
$ Digite o seu nome: "Eu Mesmo"
```
Saída: Ola "Eu
(c) Se é usado um pipe. Por exemplo:
```bash
$ echo Eu | ./ola_usuario_1
```
saída: Ola Eu

(d) Se é usado um pipe com mais de um nome. Por exemplo:
```bash
$ echo Eu Mesmo | ./ola_usuario_1
```
saída: Ola Eu
(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
```bash
$ echo "Eu Mesmo" | ./ola_usuario_1
```
Saída: Ola "Eu
(f) Se é usado o redirecionamento de arquivo. Por exemplo:
```bash
$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_1 < ola.txt
```
Saída: Ola Ola
4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':

```bash
$ ./ola_usuario_2 Eu
$ Ola Eu
```
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv[ ])
{


    printf ("Ola %s\n", argv[1]);
    return 0;

}

5. Apresente os comportamentos do código anterior nos seguintes casos:

(a) Se o usuário insere mais de um nome.
```bash
$ ./ola_usuario_2 Eu Mesmo
```

(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
```bash
$ ./ola_usuario_2 "Eu Mesmo"
```
Saída: Ola Eu mesmo
(c) Se é usado um pipe. Por exemplo:
```bash
$ echo Eu | ./ola_usuario_2
```
Saída:  Ola (null)
(d) Se é usado um pipe com mais de um nome. Por exemplo:
```bash
$ echo Eu Mesmo | ./ola_usuario_2
```
Saída: Ola (null)
(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
```bash
$ echo Eu Mesmo | ./ola_usuario_2
```
Saída: Ola (null)
(f) Se é usado o redirecionamento de arquivo. Por exemplo:
```bash
$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_2 < ola.txt
```
Saída: Ola (null)
6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':

```bash
$ ./ola_usuario_3 Eu
$ Ola Eu
$ Numero de entradas = 2
```

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv[ ])
{
    printf ("Ola %s\n", argv[1]);
    printf ("Numero de entradas: %d\n", argc);

    return 0;

}

7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':

```bash
$ ./ola_argumentos Eu Mesmo e Minha Pessoa
$ Argumentos: Eu Mesmo e Minha Pessoa
```
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv[ ])
{

    int i;
    printf ("Argumentos: \n");

    for (i = 1; i < argc; i++)
    {
        printf("%s ",argv[i]);
    }

 return 0;
}

8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:
`int Num_Caracs(char *string);` Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.
#include <stdio.h>
#include "num_caracs.h"

int Num_Caracs(char *string)
{
    int contador = 0;

    while(string [contador] !='\0')
	{
		contador++;
	}
    
	printf("A string possui %d caracteres.\n", contador);

	return contador;

}

9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':

```bash
$ ./ola_num_caracs_1 Eu Mesmo
$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
$ Argumento: Eu / Numero de caracteres: 2
$ Argumento: Mesmo / Numero de caracteres: 5
```

#include <stdio.h>
#include "num_caracs.h"

int main(int argc, char **argv){

		int contador=0;

		for (contador = 0; contador < argc; contador++){	

      	printf ("Argumento: %s / Numero de caracteres: %d\n",argv contador],Num_Caracs(argv[contador]));
    }
 
 		return 0;
}


10. Crie um Makefile para a questão anterior.

ola_num: q9.o num_caracs.o
   gcc $(CFLAGS) -o ola_num q9.o ola_num.o
q9.o: q9.c num_caracs.h
   gcc $(CFLAGS) -c q9.c
num_caracs.o: num_caracs.c num_caracs.h
   g++ $(CFLAGS) -c num_caracs.c
clean:
   rm -f *.o num_caracs
   
   Comando: ./num_caracs

11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':

```bash
$ ./ola_num_caracs_2 Eu Mesmo
$ Total de caracteres de entrada: 25
```
#include <stdio.h>
#include "num_caracs.h"

int main(int argc, char **argv)
{

    int contador = 0;
    int caracs = 0;

    for (contador = 0; contador < argc; contador++)
    {
        caracs = caracs + Num_Caracs(argv[contador]);
    }

    printf ("Total de caracteres de entrada: %d\n",caracs);

    return 0;
}

12. Crie um Makefile para a questão anterior.

ola_num: q11.o num_caracs.o
    gcc $(CFLAGS) -o ola_num q11.o ola_num.o
q11.o: q11.c num_caracs.h
    gcc $(CFLAGS) -c q11.c
num_caracs.o: num_caracs.c num_caracs.h
    g++ $(CFLAGS) -c num_caracs.c
clean:
    rm -f *.o num_caracs

